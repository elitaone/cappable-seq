# This document explains all the scripts used for analyzing Cappable-seq data 
# Programs are developed and maintained by Bo Yan (New England Biolabs, yan@neb.com). 

##################
#---- Introduction

Cappable-seq or ReCappable-seq captures the prokaryotic or eukaryotic primary transcripts.

See the following reference for details:


## Pipeline for Cappable-seq or ReCappable-seq TSS analysis:

illumina single end sequencing Read1 -> 
trim the adapter using cutadapt ->
reads mapping using bowties or STAR with soft clipping at the 5'end ->
convert bam file to bed using bedtools bamtobed, convert bed to gtf using bam2gtf.py ->
count the number of reads using CountTssGTP.py ->
compare with the control library to remove the false positive TSS using FilterTssGTF.py ->
TSS clustering using ClusterTssGTP.py

##################

#---- bam2gtf.py

Based on python 2.7

This is used to convert the bam/bed file (0-coordination) into a gtf file.

Usage:
$python bam2gtf.py --input bam  --output .gtf --type bam 
OR
$python bam2gtf.py --input bed  --output .gtf --type bed

Logic:
To convert bed (bamtobed) to gtf, I use bed-column2+1 -> gtf-start, bed-column3 -> gtf-end, 
and combine the information in bed-column4(ID)-column5(MAPQ) (if not empty) to the attribute column in gtf (using ';' as seperator).

--input is a bed or sorted and indexed bam file.
bed e.g.
NC_000913.3     0       87      M01193:350:000000000-AAM45:1:1108:18550:9187    44      +

--ouput is a gtf file, containing the read ID and MAPQ
gtf e.g.
NC_000913.3     Replicate1_enriched.bam gtf     1       87      .       +       1-coordination  M01193:350:000000000-AAM45:1:1108:18550:9187;44
Note:
(1) here 44 is from the fifth column of bed file, which is the MAPQ from sam file.

--type: the type of input file, could be bam or bed, default is bam

Note:
(1) Need bedtools in $PATH or change the bedtools path manually in the parser.
(2) bam to bed conversion is performed using bedtools bamtobed, 
    so Flag 4 entry is not in the converted bed file;
    do not do any Flag filter of reads in bam file,
    therefore need to perform Flag selection (e.g. -F 256) before running this conversion step.


#---- CountTssGTF.py

Based on python 2.7

This is used to count the TPM or nio of each TSS.

Usage:
$python CountTssGTF.py --input .gtf --output .gtf --cutoff (default 0)

Logic:
For each position in the genome, the algorithm counts the number of Tss tags in each orientation (nio);
output coordination is 1-based.
Since the Tss position is based on the bed file which is converted from the bam file, 
whether using soft clip or not during the mapping is important for the Tss caculation.

--input: a gtf file having the read information, which is generated from bam or bed using bam2gtf.py.
         e.g.
         NC_000913.3     Replicate1_enriched.bam gtf     1       87      .       +       1-coordination  M01193:350:000000000-AAM45:1:1108:18550:9187;44

--output: a sorted standard gtf tss file correponding to TSS genomic position. The coordinates are also in 1-based system.
        e.g.
        chr, source, feature, TSS, TSS, TPM, strand, coordination, attribute (nio=number of reads; TPM)
        NC_000913.3     Replicate1_enriched.gtf tssgtf  12      12      0.15128805897   +       1-coordination  nio=2;TPM=0.15128805897;
        NC_000913.3     Replicate1_enriched.gtf tssgtf  27      27      0.453864176909  +       1-coordination  nio=6;TPM=0.453864176909;
        Here soure is the input file name.
        For the attribute, I add ';' at the end, which is used for re.findall search in the other functions.

--cutoff: a float used to filter out positions whose TPM are below the defined cutoff (default 0, no filtering)

Note:
(1) This script could be used for genome with multiple chrs.
(2) This script equals to CoungTSSBED.py + tss2gtf.py, but it generates gtf file as output and take gtf file as input.
(3) This script requires bedtools, so need bedtools in $PATH or change the bedtools path manually in the parser.
(4) Result is the same as generated by Laurence's bam2firstbasegtf.pl;
    nio: number of reads starting at this TSS positions;
    TPM = nio/(total number of entries in the bed file converted by bamtobed)*1,000,000
(5) output has the precise TSS information that could be used for getfasta directly to have the nucleotide at the TSS position:
    $bedtools getfasta -s -fi /mnt/home/ettwiller/yan/reference/GRC38_hg20/ensembl/Homo_sapiens.GRCh38.dna.primary_assembly.fa -bed .gtf -fo temp.fasta
    >1:15425884-15425885(+) = IGV 15425885
    G
(6) The output gtf is sorted based on the chr and start (sort -f -k1,1 -k4,4n).


#---- FilterTssGTF.py

Based on python 2.7

This is used to caculate the EnrichRatio(EnrichTPM/ControlTPM) and apply TPM and ratio cutoff.

Usage:
$python FilterTssGTF.py --enrich .tsscount.gtf --control .tsscount.gtf --output .gtf --cutoff (default 0) --ratio (default 1) 

Logic:
For each TSS position in Enrich, the algorithm caculate the EnrichRatio and filter the TSS based on --cutoff and --ratio.

To filter:
First only save the Enrich positions with TPM >= cutoff(default=0 means without filter);
Second only save the Enrich positions with EnrichRatio >= ratio(dafault=1). 

--enrich: a tsscount.gtf file generated by CountTssGTF.py having the TSS and TPM information in Enrich.
    chr, source, feature, TSS, TSS, TPM*, strand, coordination, attribute
    NC_000913.3     M9.tss  TSS     143     143     2.66445339405*   +       1-coordination  nio=2;TPM=2.66445339405;
    NC_000913.3     M9.tss  TSS     147     147     6.66113348512   +       1-coordination  nio=5;TPM=6.66113348512;
    NC_000913.3     M9.tss  TSS     148     148     147.87716337    +       1-coordination  nio=111;TPM=147.87716337;
    Note:
    * I need TPM in column 5 in tss.gtf to calculate the Ratio.

--control: a tsscount.gtf file generated by CountTssGTF.py having the TSS and TPM information in Control.
    chr, source, feature, TSS, TSS, TPM, strand, coordination, attribute
    NC_000913.3     M9.control.tss  TSS     148     148     9.76438538076   +       1-coordination  nio=2;TPM=9.76438538076;
    NC_000913.3     M9.control.tss  TSS     170     170     4.88219269038   +       1-coordination  nio=1;TPM=4.88219269038;

--cutoff: a float
    TPM cutoff for the positions in Enrich file to be saved in the output.

--ratio: a float
    EnrichRatio cutoff for positions in Enrich file to be saved in the output; 
    here ratio=1 equals to log2(RRStss/RRScontrol)=0 cutoff in Laurence's filter_tss.pl.
    If the enrich and control have very different amount of reads, the ratio should be determined based on the Ratio Distribution.

--output: a gtf file
    chr, source, feature, TSS, TSS, TPM, strand, coordination, attribute
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     143     143     2.66445339405   +       1-coordination  nio=2;TPM=2.66445339405;Ratio=0.55;nio_control=0;TPM_control=4.88219269038;
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     147     147     6.66113348512   +       1-coordination  nio=5;TPM=6.66113348512;Ratio=1.36;nio_control=0;TPM_control=4.88219269038;
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     148     148     147.87716337    +       1-coordination  nio=111;TPM=147.87716337;Ratio=15.14;nio_control=2;TPM_control=9.76438538076;

    Also save the filtered entries (filtered by --cutoff 0, --ratio 0.2) in ratio.filter.tss.gtf file, e.g:
    NC_000913.3     M9.filter.tss   TSS     266     266     1.33222669702   +       1-coordination  nio=1;TPM=1.33222669702;Ratio=0.02;nio_control=13;TPM_control=63.468504975;
    NC_000913.3     M9.filter.tss   TSS     298     298     9.32558687917   +       1-coordination  nio=7;TPM=9.32558687917;Ratio=0.15;nio_control=13;TPM_control=63.468504975;

Note:
(1) Here TPM_1_lib means the TPM value equaling to 1 read in the lib,
    so EnrichRatio=(TPM_Enrich)/(TPM_Control), which is rounded to 2 digits after dot,
    and for the positions having 0 read in control (nio_control=0;TPM_control=0), EnrichRatio=(TPM_Enrich)/(TPM_1_control), 
    e.g TPM_1_control=0.0157977883096:
    chr1    D3D4.gtf        tssgtf  10611   10611   0.0157977883096 -       1-coordination  nio=1;TPM=0.0157977883096;Ratio=1.0;nio_control=0;TPM_control=0; 
(2) This script could be used for genome with multiple chrs.
(3) The output file attribute contains the original attribute of Enrich (e.g. containing the nioMAPQ information),
    and add Ratio=(TPM_Enrich)/(TPM_control) and the nio_control, TPM_control;
    for the entry with nio=0 in control, report Ratio=(TPM_Enrich)/(TPM_1_Control), nio_control=0, TPM_control=0.
(4) Also save the filtered entries (filtered by --cutoff 0, --ratio 0.2) in ratio.filter.tss.gtf file.


#---- ClusterTssGTF.py

Based on python 2.7

This is used cluster the nearby TSS sites.
Can not be used by multiple threads in parallel.

Usage:
$python ClusterTssGTF.py --input .tsscount.gtf --output output.gtf --distance int --cutoff float

Logic:
Cluster the nearby TSSs [start at T1, T2 ..Tn] if abs(T2-T1)<distance cutoff ... abs(Tn -Tn-1)<distance cutoff;
in other words, the distance between TSSs in the Cluster <distance cutoff;
report the TSS cluster as well as the summit of the cluster.

--input: a gtf (1-coordination) file having the TSS and TPM information, which is generated by CountTssTag.py or FilterTSS.py:

Examples:

(1).tss.gtf generated by CountTssTagGTF.py:
    chr, source, feature, tss, tss, TPM, strand, coordination, attribute
    chr16	D3D4.gtf	tssgtf	53704156	53704156	1.61137440758	+	1-coordination	nio=102;TPM=1.61137440758;

(2).tsscount.gtf generated by FilterTssGTF.py:
    chr, source, feature, tss, tss, TPM, strand, coordination, attribute (combined bed-3-4-column) 
    chr16	D3D4.gtf	tssgtf	53704156	53704156	1.61137440758	+	1-coordination	nio=102;TPM=1.61137440758;nioMAPQ=102;Ratio=0.69;nio_control=148;TPM_control=2.33807266983;

--output: a gtf file having the TSS cluster start and end, TPM information and cluster summit, 1-coordination.
    e.g.
    chr, source, feature, 5'end of TSS cluster, 3'end of TSS cluster, TPM of cluster, strand, coordination, attribute (nio of cluster; TPM of cluster; summit; nio_summit; TPM_summit)
    chr16	D3D4.gtf	cluster	53704156	53704176	4.34439178515	+	1-coordination	nio=275;TPM=4.34439178515;summit=53704176;nio_summit=173;TPM_summit=2.73301737757; 
    
    Also automatcially generate another file TSScluster.report having the original TSS sites in each cluster.

--cutoff: float, default=0
    a float used to filter the clusters/singleton(if no nearby TSS) whose TPM_summit are below the defined cutoff;
    in other words, all the TSS in the cluster having TPM<cutoff.

--distance: int, default=5
    The distance used to define adjacent TSSs, whose distance<=int will be clustered.

Note:
(1) This script could be used for input file having multiple chrs.
(2) The output gtf is sorted based on the chr and start (sort -f -k1,1 -k4,4n).
(3) If any chr only has one TSS position, then report this one in the output.
(4) If there are more than one TSS in the cluster having the maximum number of TPM, report the smallest TSS as summit, e.g. using 158 for (158,161) cluster.
(5) Here nio/TPM is the total number/TPM of tags from all the TSSs in the cluster, and this is compatable with the caculateRawReadsTSS_v3.py calculation.
(6) Only extract the nio and TPM for each entry, will ignore the other information in the attribute column in input (e.g.Ratio, nioMAPQ);
    e.g. the input file could have the nioMAPQ/Ratio information, but this information is not used or output in the cluster analysis.
(7) Also automatcially generate another file TSScluster.report (1-coordination) having the original TSS sites in each cluster, e.g.:
    chr, summit of cluster, strand, TSSs in the cluster
    chr16	53704176	+	53704156;53704176;

##################
