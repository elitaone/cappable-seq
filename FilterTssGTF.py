#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
# author Bo Yan

'''
# Logs:

Created on Sept 3, 2018

Made modification on Oct 25, 2018:
    Ratio is rounded to 2 digits, and report TPM_control=0 instead of the previous TPM_control=TPM_1_control in the output;
    Ratio is rounded to 2 digits could affect the histogram of Ratio distribution. 
'''

'''
Based on python 2.7

This is used to caculate the EnrichRatio(EnrichTPM/ControlTPM) and apply TPM and ratio cutoff.

Usage:
$python FilterTssGTF.py --enrich .tsscount.gtf --control .tsscount.gtf --output .gtf --cutoff (default 0) --ratio (default 1) 

Logic:
For each TSS position in Enrich, the algorithm caculate the EnrichRatio and filter the TSS based on --cutoff and --ratio.

To filter:
First only save the Enrich positions with TPM >= cutoff(default=0 means without filter);
Second only save the Enrich positions with EnrichRatio >= ratio(dafault=1). 

--enrich: a tsscount.gtf file generated by CountTssGTF.py having the TSS and TPM information in Enrich.
    chr, source, feature, TSS, TSS, TPM*, strand, coordination, attribute
    NC_000913.3     M9.tss  TSS     143     143     2.66445339405*   +       1-coordination  nio=2;TPM=2.66445339405;
    NC_000913.3     M9.tss  TSS     147     147     6.66113348512   +       1-coordination  nio=5;TPM=6.66113348512;
    NC_000913.3     M9.tss  TSS     148     148     147.87716337    +       1-coordination  nio=111;TPM=147.87716337;
    Note:
    * I need TPM in column 5 in tss.gtf to calculate the Ratio.

--control: a tsscount.gtf file generated by CountTssGTF.py having the TSS and TPM information in Control.
    chr, source, feature, TSS, TSS, TPM, strand, coordination, attribute
    NC_000913.3     M9.control.tss  TSS     148     148     9.76438538076   +       1-coordination  nio=2;TPM=9.76438538076;
    NC_000913.3     M9.control.tss  TSS     170     170     4.88219269038   +       1-coordination  nio=1;TPM=4.88219269038;

--cutoff: a float
    TPM cutoff for the positions in Enrich file to be saved in the output.

--ratio: a float
    EnrichRatio cutoff for positions in Enrich file to be saved in the output; 
    here ratio=1 equals to log2(RRStss/RRScontrol)=0 cutoff in Laurence's filter_tss.pl.
    If the enrich and control have very different amount of reads, the ratio should be determined based on the Ratio Distribution.

--output: a gtf file
    chr, source, feature, TSS, TSS, TPM, strand, coordination, attribute
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     143     143     2.66445339405   +       1-coordination  nio=2;TPM=2.66445339405;Ratio=0.55;nio_control=0;TPM_control=4.88219269038;
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     147     147     6.66113348512   +       1-coordination  nio=5;TPM=6.66113348512;Ratio=1.36;nio_control=0;TPM_control=4.88219269038;
    NC_000913.3     M9.enrich_contronl.ratio.tss    TSS     148     148     147.87716337    +       1-coordination  nio=111;TPM=147.87716337;Ratio=15.14;nio_control=2;TPM_control=9.76438538076;

    Also save the filtered entries (filtered by --cutoff 0, --ratio 0.2) in ratio.filter.tss.gtf file, e.g:
    NC_000913.3     M9.filter.tss   TSS     266     266     1.33222669702   +       1-coordination  nio=1;TPM=1.33222669702;Ratio=0.02;nio_control=13;TPM_control=63.468504975;
    NC_000913.3     M9.filter.tss   TSS     298     298     9.32558687917   +       1-coordination  nio=7;TPM=9.32558687917;Ratio=0.15;nio_control=13;TPM_control=63.468504975;

Note:
(1) Here TPM_1_lib means the TPM value equaling to 1 read in the lib,
    so EnrichRatio=(TPM_Enrich)/(TPM_Control), which is rounded to 2 digits after dot,
    and for the positions having 0 read in control (nio_control=0;TPM_control=0), EnrichRatio=(TPM_Enrich)/(TPM_1_control), 
    e.g TPM_1_control=0.0157977883096:
    chr1    D3D4.gtf        tssgtf  10611   10611   0.0157977883096 -       1-coordination  nio=1;TPM=0.0157977883096;Ratio=1.0;nio_control=0;TPM_control=0; 
(2) This script could be used for genome with multiple chrs.
(3) The output file attribute contains the original attribute of Enrich (e.g. containing the nioMAPQ information),
    and add Ratio=(TPM_Enrich)/(TPM_control) and the nio_control, TPM_control;
    for the entry with nio=0 in control, report Ratio=(TPM_Enrich)/(TPM_1_Control), nio_control=0, TPM_control=0.
(4) Also save the filtered entries (filtered by --cutoff 0, --ratio 0.2) in ratio.filter.tss.gtf file.
'''

import os
import re
import argparse


##-------functions

def FindTPM_1(input_bed):
    '''
    Use to find the value of TPM_1 in the input_bed
    input e.g.:
    NC_000913.3     M9.control.tss  TSS     148     148     9.76438538076   +       1-coordination  nio=2;TPM=9.76438538076;
    
    return 9.76438538076/2, which is a float
    '''
    
    with open(input_bed) as f:
        line = f.readline().split('\t')
        nio = int(re.findall('nio=(\d.*?);', line[-1])[0]) # '2'
        TPM = float(re.findall('TPM=(\d.*?);', line[-1])[0]) # '9.76438538076'
    return TPM/nio
    

def filter(input_bed, control_bed, output_file, TPM_cutoff, ratio_cutoff):
    '''
    Use to calculate the TPM ratio at each position in Enrich;
    only save the Positions in Enrich that nio>=nio_cutoff and EnrichRatio>ratio_cutoff.
    Here the input_bed and control_bed are the ones with TPM_1 added.
    '''
    TPM_1_control = FindTPM_1(control_bed) # float
       
    with open(control_bed) as f:
        # key: chr, TSS, strand
        dic_key_control = [(line.strip().split('\t')[0],line.strip().split('\t')[3], line.strip().split('\t')[6]) for line in f]
        f.seek(0)
        dic_value_control = [(re.findall('nio=(\d.*?);', line.strip().split('\t')[-1])[0], re.findall('TPM=(\d.*?);', line.strip().split('\t')[-1])[0]) for line in f] # nio=2;TPM=9.76438538076 -> [(nio,TPM), ...], ('2','9.76438538076') ...
        dic_control = dict(zip(dic_key_control, dic_value_control)) # chr, TSS, strand: nio, TPM
    
    count_input = 0
    count_output = 0
    
    # sort the output file and move it to the required dir
    if os.path.dirname(output_file): # e.g. --output /mnt/home/ettwiller/yan/Tzertzinis/180201_Miseq/TSS/STAR.F1.primary.tssratio.bed
        dir_output = os.path.dirname(output_file) # /mnt/home/ettwiller/yan/Tzertzinis/180201_Miseq/TSS
        if dir_output == '.':
            dir_output = os.getcwd()
    else: # e.g. --output STAR.F1.primary.tssratio.bed
        dir_output = os.getcwd()

    
    print "=================="
    print "Compare with enrich vs control to remove false positive TSS."
    print "The output file is {}.".format(os.path.basename(output_file))
    print "Also save the filtered entries in ratio.filter.tss.gtf file."
    print "The output path is {}.".format(dir_output)
    
    output = open(output_file, 'w')
    output_filter = open(dir_output+'/ratio.filter.tss.gtf', 'w')
    with open(input_bed) as f:
        for line in f:
            count_input +=1
            line = line.strip().split('\t')
            
            key = (line[0], line[3], line[6])
            
            if dic_control.has_key(key):
                ControlTPM = float(dic_control[key][1])
                nio_control = dic_control[key][0]
                EnrichRatio = round(float(line[5])/ControlTPM, 2) # round Ratio to 2 digits after dot
            else:
                ControlTPM = 0 # or TPM_1_control
                nio_control = '0'
                EnrichRatio = round(float(line[5])/TPM_1_control, 2) # round Ratio to 2 digits after dot
            
            temp = line[-1].split(';')[:-1] # line[-1]: nio=2;TPM=9.76438538076; return ['nio=2', 'TPM=9.76438538076']
            temp.extend(['Ratio='+str(EnrichRatio), 'nio_control='+nio_control, 'TPM_control='+str(ControlTPM),'']) # I add '' here to have the ';' at the end of '\t'.join(temp)
            line[-1] = ";".join(temp)

            if EnrichRatio >= ratio_cutoff and float(line[5]) >= TPM_cutoff:
                print>>output, '\t'.join(line)
                count_output +=1
            else:
                print>>output_filter, '\t'.join(line)
    output.close()
    output_filter.close()
    
    print "There are %d TSS positions in the input." % count_input
    print "There are %d TSS positions in the output with TPM>= %f and EnrichRatio >= %f." % (count_output, TPM_cutoff, ratio_cutoff)
    print "=================="    
       

  
##-------Parser
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', '--enrich', help='enrich file name', dest='input_gtf')
    parser.add_argument('-c', '--control', help='control file name', dest='control_gtf')
    parser.add_argument('-o', '--output', help='output file name', dest='output_file')
    parser.add_argument('--cutoff', help='cutoff of TPM', type=float, dest='TPM_cutoff', default=0)
    parser.add_argument('--ratio', help='cutoff of EnrichRatio', type=float, dest='ratio_cutoff', default=1)

    args = parser.parse_args()
    filter(args.input_gtf, args.control_gtf, args.output_file, args.TPM_cutoff, args.ratio_cutoff)
  
    
 